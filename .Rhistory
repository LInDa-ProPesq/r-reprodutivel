setwd("~/OneDrive/Projetos 2018/Ciencia de Dados/Introducao a Ciencia de Dados/Projetos/r-reprodutivel")
library(ggplot2)
packrat::status()
install.packages("ggplot2");
library(ggplot2)
#Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
# Plotar vendas por mil de publicidade televisiva
library(ggplot2)
png(filename = "graphics/publi_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
# processamento (remover outlier)
outlierIndex <- which(adsData$TV < 0)
adsData <- adsData[-outlierIndex,]
# Ajustar (fit) o modelo linear aos dados
lmFit <- lm(Sales~TV, data=adsData)
# Imprimir os coefficients
lmFitCoef <- coef(lmFit)
lmFitCoef
# De acordo com o ajuste linear, aumentar o orçamento de TV em mil dólares resultará, aproximadamente, em 47 unidades extras vendidas.
# O ajuste é grafico abaixo.
# Gráfico do ajuste (fit)
png(filename = "graphics/relacao_orcamento_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
geom_abline(intercept = lmFitCoef[1], slope = lmFitCoef[2], col="blue") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
packrat::status()
packrat::snapshot()
#Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
#Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
#Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
#Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
packrat::status()
#Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
setwd("~/OneDrive/Projetos 2018/Ciencia de Dados/Introducao a Ciencia de Dados/Projetos/r-reprodutivel")
#Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
packrat::status()
# Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
# Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
# Plotar vendas por mil de publicidade televisiva
library(ggplot2)
png(filename = "graphics/publi_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
# Processamento (Limpeza - remover outlier)
# Outlier - valor aberrante ou valor atípico, é uma observação que apresenta um grande
# afastamento das demais da série
outlierIndex <- which(adsData$TV < 0)
adsData <- adsData[-outlierIndex,]
# Ajustar (fit) o modelo linear aos dados
lmFit <- lm(Sales~TV, data=adsData)
# Imprimir os coefficients
lmFitCoef <- coef(lmFit)
lmFitCoef
# De acordo com o ajuste linear, aumentar o orçamento de TV em mil dólares resultará,
# aproximadamente, em 47 unidades extras vendidas.
# O ajuste é grafico abaixo.
# Gráfico do ajuste (fit)
png(filename = "graphics/relacao_orcamento_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
geom_abline(intercept = lmFitCoef[1], slope = lmFitCoef[2], col="blue") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
setwd("C:/GitHub/r-reprodutivel")
packrat::status()
install.packages("MASS","Matrix","dichromat","lattice","mgcv","nlme")
install.packages("MASS")
install.packages("Matrix")
install.packages("dichromat","lattice","mgcv","nlme")
install.packages("dichromat")
install.packages("lattice")
install.packages("mcgv")
install.packages("nmle")
install.packages("mgcv")
install.packages(" nlme")
install.packages("nlme")
packrat::snapshot()
packrat::status()
packrat::restore()
#packrat::restore()
packrat::snapshot()
# Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
# Plotar vendas por mil de publicidade televisiva
library(ggplot2)
png(filename = "graphics/publi_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
# Processamento (Limpeza - remover outlier)
# Outlier - valor aberrante ou valor atípico, é uma observação que apresenta um grande
# afastamento das demais da série
outlierIndex <- which(adsData$TV < 0)
adsData <- adsData[-outlierIndex,]
# Ajustar (fit) o modelo linear aos dados
lmFit <- lm(Sales~TV, data=adsData)
# Imprimir os coefficients
lmFitCoef <- coef(lmFit)
lmFitCoef
# De acordo com o ajuste linear, aumentar o orçamento de TV em mil dólares resultará,
# aproximadamente, em 47 unidades extras vendidas.
# O ajuste é grafico abaixo.
# Gráfico do ajuste (fit)
png(filename = "graphics/relacao_orcamento_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
geom_abline(intercept = lmFitCoef[1], slope = lmFitCoef[2], col="blue") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
getwd()
# read in the data
adsData<- read.csv("Advertising2.csv")
# read in the data
adsData<- read.csv("./data/Advertising2.csv")
# processing (remove outlier)
outlierIndex <- which(adsData$TV < 0)
adsData <- adsData[-outlierIndex,]
# fit linear model to the data
lmFit <- lm(Sales~TV, data=adsData)
# print coefficients
lmFitCoef <- coef(lmFit)
lmFitCoef
# plot linear fit
library(ggplot2)
install.packages("ggplot2")
# plot linear fit
library(ggplot2)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
geom_abline(intercept = lmFitCoef[1], slope = lmFitCoef[2], col="blue") +
ylab("Sales (per thousand units)") + xlab("TV budget (per thousand dollars)")
packrat::restore()
packrat::snapshot()
# Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
# Plotar vendas por mil de publicidade televisiva
library(ggplot2)
png(filename = "graphics/publi_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
# Processamento (Limpeza - remover outlier)
# Outlier - valor aberrante ou valor atípico, é uma observação que apresenta um grande
# afastamento das demais da série
outlierIndex <- which(adsData$TV < 0)
adsData <- adsData[-outlierIndex,]
# Ajustar (fit) o modelo linear aos dados
lmFit <- lm(Sales~TV, data=adsData)
# Imprimir os coefficients
lmFitCoef <- coef(lmFit)
lmFitCoef
# De acordo com o ajuste linear, aumentar o orçamento de TV em mil dólares resultará,
# aproximadamente, em 47 unidades extras vendidas.
# O ajuste é grafico abaixo.
# Gráfico do ajuste (fit)
png(filename = "graphics/relacao_orcamento_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
geom_abline(intercept = lmFitCoef[1], slope = lmFitCoef[2], col="blue") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
packrat::status()
packrat::restore()
packrat::status()
packrat::restore()
packrat::snapshot()
# Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
# Plotar vendas por mil de publicidade televisiva
library(ggplot2)
png(filename = "graphics/publi_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
install.packages("ggplot2")
packrat::snapshot()
# Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
# Plotar vendas por mil de publicidade televisiva
library(ggplot2)
png(filename = "graphics/publi_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
# Processamento (Limpeza - remover outlier)
# Outlier - valor aberrante ou valor atípico, é uma observação que apresenta um grande
# afastamento das demais da série
outlierIndex <- which(adsData$TV < 0)
adsData <- adsData[-outlierIndex,]
# Ajustar (fit) o modelo linear aos dados
lmFit <- lm(Sales~TV, data=adsData)
# Imprimir os coefficients
lmFitCoef <- coef(lmFit)
lmFitCoef
# De acordo com o ajuste linear, aumentar o orçamento de TV em mil dólares resultará,
# aproximadamente, em 47 unidades extras vendidas.
# O ajuste é grafico abaixo.
# Gráfico do ajuste (fit)
png(filename = "graphics/relacao_orcamento_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
geom_abline(intercept = lmFitCoef[1], slope = lmFitCoef[2], col="blue") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
packrat::status()
getwd()
packrat::status()
packrat::restore()
packrat::snapshot()
# Análise exploratória de dados
# O primeiro passo de uma análise geralmente envolve explorar os dados.
# Sera feita a exploração para o arquivo Advertising2.csv (orçamentos de TV).
# Ler os dados
adsData <- read.csv("data/Advertising2.csv")
View(adsData)
# Plotar vendas por mil de publicidade televisiva
library(ggplot2)
png(filename = "graphics/publi_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
# Processamento (Limpeza - remover outlier)
# Outlier - valor aberrante ou valor atípico, é uma observação que apresenta um grande
# afastamento das demais da série
outlierIndex <- which(adsData$TV < 0)
adsData <- adsData[-outlierIndex,]
# Ajustar (fit) o modelo linear aos dados
lmFit <- lm(Sales~TV, data=adsData)
# Imprimir os coefficients
lmFitCoef <- coef(lmFit)
lmFitCoef
# De acordo com o ajuste linear, aumentar o orçamento de TV em mil dólares resultará,
# aproximadamente, em 47 unidades extras vendidas.
# O ajuste é grafico abaixo.
# Gráfico do ajuste (fit)
png(filename = "graphics/relacao_orcamento_tv.png", width = 480, height = 480)
ggplot(adsData, aes(x=TV, y=Sales)) + geom_point(col="darkorange") +
geom_abline(intercept = lmFitCoef[1], slope = lmFitCoef[2], col="blue") +
ylab("Vendas (por mil unidades)") + xlab("Orçamento de TV (por mil dólares)")
dev.off()
update.R()
library(installr)
install.packages("installr")
library(installr)
check.for.updates.R()
updateR(TRUE)
